from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, ContentType

from secrets import token_hex

from classes import Join, ORDER, Dodo, Fank, Limonad, Iberia

from token_get import token, user, password, db_name, host, port, api_org, token_pay  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
import psycopg2
import requests
import asyncio
import aioschedule
import pandas as pd

bot = Bot(token)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


@dp.message_handler(commands='start', state='*')
async def start(message: types.Message, state: FSMContext):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Çüëã. –Ø –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Å–±–æ—Ä–∞ –∑–∞–∫–∞–∑–æ–≤ –≤ –≤–∞—à–µ–º –æ—Ñ–∏—Å–µ.\n"
        "–î–ª—è –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã, —Å–æ–∑–¥–∞–π—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∫–æ–º–ø–∞–Ω–∏—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /create_token.\n"
        "–ï—Å–ª–∏ –≤–∞–º —Å–∫–∏–Ω—É–ª–∏ —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è, —Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –∫–æ–º–ø–Ω–∞–∏–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /join_team\n–ï—Å–ª–∏ –≤—ã –∑–∞–±–ª—É–¥–∏—Ç–µ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help")
    await state.finish()


@dp.message_handler(commands='create_token', state='*')
async def create_token_start(message: types.Message):
    try:
        token = token_hex(16)
        with open('tokens.txt', 'r') as file:
            text = file.readlines()
        with open('tokens.txt', 'w') as file:
            text.append(f"{token}")
            file.write('\n'.join(text))
        cur = con.cursor()
        cur.execute("""INSERT INTO userinfo (name, id_chat) VALUES (%s, %s)""", (message.from_user.username,
                                                                                 str(message.chat.id)))
        con.commit()
        await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –∫–æ–º–ø–∞–Ω–∏—é")
        await message.answer(f'{token}')
    except Exception:
        await message.answer("–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —É–∂–µ —Å–æ–∑–¥–∞–ª–∏ –∫–æ–º–ø–∞–Ω–∏—é")


@dp.message_handler(commands='join_team', state='*')
async def join_token_start(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω")
    await Join.start.set()


@dp.message_handler(state=Join.start)
async def join_token_start(message: types.Message, state: FSMContext):
    try:
        with open("tokens.txt", 'r') as file:
            text = file.readlines()
        if any([lambda x: x in text, message.text]):
            cur.execute("""INSERT INTO userinfo (name, id_chat) VALUES (%s, %s)""", (message.from_user.username,
                                                                                     str(message.chat.id)))
            con.commit()
            await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–ø–∞–Ω–∏–∏")
        else:
            await message.answer("–¢–∞–∫–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        await state.finish()
    except Exception as e:
        await message.answer("–í–æ–∑–º–æ–∂–Ω–æ –≤—ã —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–ø–∞–Ω–∏–∏")
        await state.finish()


@dp.message_handler(commands=['–∑–∞–∫–∞–∑'])
async def order(message: types.Message, state: FSMContext):
    cur.execute("""SELECT * FROM userinfo WHERE name = %s""", (message.from_user.username,))
    user = cur.fetchone()
    if user:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
        texts = ['—Ä–µ—Å—Ç–æ—Ä–∞–Ω –î–æ–¥–∞ –ø–∏—Ü—Ü–∞ –î—É–±–Ω–∞', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω –î—É–±–Ω–∞']
        response = []
        for text in texts:
            res = requests.get(
                f'https://search-maps.yandex.ru/v1/?text={text}&type=geo&lang=ru_RU&apikey={api_org}&type=biz').json()
            response.append(res)
        n = []
        buttons = []
        for res in response:
            for name in res['features'][1:]:
                try:
                    names = name['properties']['CompanyMetaData']['name']
                    if '–î—É–±–Ω–∞' in names or '–ö–∞–º–µ–ª–æ—Ç' in names:
                        continue
                    phone = name['properties']['CompanyMetaData']['Phones'][0]['formatted']
                    url = name['properties']['CompanyMetaData']['url']
                    n.append(f"–ù–∞–∑–≤–∞–Ω–∏–µ - {names}.\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - {phone}.\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç - {url}")
                    buttons.append(names)
                except Exception:
                    pass
        button_restoranov = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).row(
            *[KeyboardButton(i) for i in buttons])
        await state.update_data(user_name=user[1], chat_id=user[2])
        await message.answer('–î–ª—è –∑–∞–∫–∞–∑–∞ —Å–ª–µ–¥—É–π—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π')
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω', reply_markup=button_restoranov)
        await message.answer('\n'.join([f"{id + 1}) {i}" for id, i in enumerate(n)]))
        await ORDER.RESTORAN.set()
    else:
        await message.answer("–í—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –∫–æ–º–ø–∞–Ω–∏–∏")
        await state.finish()


@dp.message_handler(state=ORDER.RESTORAN)
async def rest_step(message: types.Message, state: FSMContext):
    response = []
    for text in ['—Ä–µ—Å—Ç–æ—Ä–∞–Ω –î–æ–¥–∞ –ø–∏—Ü—Ü–∞ –î—É–±–Ω–∞', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω –î—É–±–Ω–∞']:
        response.append(requests.get(
            f'https://search-maps.yandex.ru/v1/?text={text}&type=geo&lang=ru_RU&apikey={api_org}&type=biz').json())
    buttons = []
    for res in response:
        for name in res['features'][1:]:
            try:
                names = name['properties']['CompanyMetaData']['name']
                if '–î—É–±–Ω–∞' in names or '–ö–∞–º–µ–ª–æ—Ç' in names:
                    continue
                url = name['properties']['CompanyMetaData']['url']
                buttons.append(names)
            except Exception:
                pass
    if message.text.lower() not in list(map(str.lower, buttons)):
        task = asyncio.create_task(order(message, state))
        await task
    else:
        await state.update_data(RESTORAN=message.text)
        await message.answer('–£–∫–∞–∂–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ –∫–æ–ª–ª–µ–≥–∞–º–∏ üí≥')  # –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞: –∫–æ–Ω—Ç–∞–∫—Ç, –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã.
        await ORDER.PAY_INFO.set()


@dp.message_handler(state=ORDER.PAY_INFO)
async def pay_info_step(message: types.Message, state: FSMContext):
    try:
        int(message.text)
        await state.update_data(PAY_INFO=message.text)
        buttons = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).row(
            *[KeyboardButton(i) for i in ['10 –º–∏–Ω—É—Ç', '30 –º–∏–Ω—É—Ç', '1 —á–∞—Å', '1 —á–∞—Å 30 –º–∏–Ω—É—Ç', '3 —á–∞—Å–∞']])
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏', reply_markup=buttons)
        await ORDER.TIME.set()
    except ValueError:
        await message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        await message.answer('–£–∫–∞–∂–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ –∫–æ–ª–ª–µ–≥–∞–º–∏ üí≥')


@dp.message_handler(state=ORDER.TIME)
async def time_step(message: types.Message, state: FSMContext):
    if message.text.lower() not in ['10 –º–∏–Ω—É—Ç', '30 –º–∏–Ω—É—Ç', '1 —á–∞—Å', '1 —á–∞—Å 30 –º–∏–Ω—É—Ç', '3 —á–∞—Å–∞']:
        await message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        buttons = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).row(
            *[KeyboardButton(i) for i in ['10 –º–∏–∏–Ω—É—Ç', '30 –º–∏–Ω—É—Ç', '1 —á–∞—Å', '1 —á–∞—Å 30 –º–∏–Ω—É—Ç', '3 —á–∞—Å–∞']])
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏', reply_markup=buttons)
    else:
        dic = {'10 –º–∏–Ω—É—Ç': 5, '30 –º–∏–Ω—É—Ç': 30 * 60, '1 —á–∞—Å': 3600, '1 —á–∞—Å 30 –º–∏–Ω—É—Ç': 3600 + 30 * 60, '3 —á–∞—Å–∞': 3 * 3600}
        await state.update_data(TIME=message.text)
        cur.execute("SELECT (id_chat) FROM userinfo")
        names = cur.fetchall()
        data = await state.get_data()
        await message.answer('–û–∂–∏–¥–∞–π—Ç–µ –∑–∞–∫–∞–∑–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤')
        buttons = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).row(
            *[KeyboardButton(i) for i in ['–î–∞', '–ù–µ—Ç']])
        cur.execute("""SELECT (id) FROM userinfo WHERE name = %s""", (message.from_user.username,))
        user = cur.fetchone()
        cur.execute("""INSERT INTO order_user (user_id) VALUES (%s)""", (user,))
        con.commit()
        cur.execute("""SELECT (id) FROM order_user WHERE user_id = %s""", (user,))
        order = cur.fetchone()
        # """        await state.update_data(order=order)"""
        for id in names:
            await bot.send_message(id[0], f"–ó–∞–∫–∞–∑. –†–µ—Å—Ç–æ—Ä–∞–Ω - {data['RESTORAN']}. –í—Ä–µ–º—è - {data['TIME']}."
                                          f"–ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑?", reply_markup=buttons)
            state_user = dp.current_state(chat=int(id[0]), user=int(id[0]))
            await state_user.set_state(ORDER.WAIT)
            await state_user.update_data(RESTORAN=data['RESTORAN'], TIME=data['TIME'],
                                         PAY_INFO=data['PAY_INFO'], user_name=data['user_name'],
                                         chat_id=data['chat_id'], order=order)
        # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ –ë–î
        loop.create_task(
            scheduled(dic[message.text.lower()], user_name=data['user_name'], chat_id=data['chat_id'], order=order,
                      id=user))
        await ORDER.WAIT.set()


@dp.message_handler(state=ORDER.WAIT)
async def wait_step(message: types.Message, state: FSMContext):
    # –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫–∞–∑ –∏–ª–∏ –Ω–µ—Ç
    if message.text.capitalize() == '–î–∞':
        task = asyncio.create_task(accept_order(message, state))
        await task
    elif message.text.capitalize() == '–ù–µ—Ç':
        await state.finish()
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç")
    else:
        buttons = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).row(
            *[KeyboardButton(i) for i in ['–î–∞', '–ù–µ—Ç']])
        await message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", reply_markup=buttons)


async def accept_order(message: types.Message, state: FSMContext):
    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞, –ø—Ä–æ–ø–∏—Å–∞–Ω–∞ —Å–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è. –ü–µ—Ä–µ–≤–µ–ª –≤ —á–∏—Å–ª–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
    data = await state.get_data()
    if data['RESTORAN'].lower() == '–¥–æ–¥–æ –ø–∏—Ü—Ü–∞':
        await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω –î–æ–¥–æ –ü–∏—Ü—Ü–∞ üçï\n –î–∞–≤–∞–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–∏–º –º–µ–Ω—é")
        task = asyncio.create_task(pizza(message, state))
        await task
    elif data['RESTORAN'].lower() == '—Ñ–∞–Ω–∫–∏':
        await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω –§–∞–Ω–∫–∏ üç≤\n–î–∞–≤–∞–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–∏–º –º–µ–Ω—é")
        task = asyncio.create_task(fank(message, state))
        await task
    elif data['RESTORAN'].lower() == '–ª–∏–º–æ–Ω–∞–¥':
        await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω –õ–∏–º–æ–Ω–∞–¥ ü•§\n–î–∞–≤–∞–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–∏–º –º–µ–Ω—é")
        task = asyncio.create_task(limonad(message, state))
        await task
    elif data['RESTORAN'].lower() == '–∏–±–µ—Ä–∏—è':
        await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω –ò–±–µ—Ä–∏—è ü•ó\n–î–∞–≤–∞–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–∏–º –º–µ–Ω—é")
        task = asyncio.create_task(iberia(message, state))
        await task
    else:
        await message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")


@dp.message_handler(state=Dodo.back)
async def pizza(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞
    if message.text.capitalize() not in ['–û–ø–ª–∞—Ç–∏—Ç—å', '–î–æ–±–∞–≤–∏—Ç—å', '–î–∞', '–ù–∞–∑–∞–¥']:
        await message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
    # –æ–ø–ª–∞—Ç–∞
    elif message.text.capitalize() == '–û–ø–ª–∞—Ç–∏—Ç—å':
        buttons = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).row(
            *[KeyboardButton(i) for i in ['–¢–µ–ª–µ–≥—Ä–∞–º–º', '–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã']])
        await message.answer("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–ª–∞—Ç–µ. –•–æ—Ç–∏—Ç–µ –æ—Ç–ø–ª–∞—Ç–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥–æ–º —á–µ—Ä–µ–∑ –¢–µ–ª–µ–≥—Ä–∞–º–º –∏–ª–∏ —Å–≤–æ–∏–º –ø—É—Ç–µ–º?",
                             reply_markup=buttons)
        await Dodo.result.set()
    else:
        # –í—ã–≤–æ–∂—É –º–µ–Ω—é
        header = {'CountryCode': '643', 'LanguageCode': 'ru', 'ApiVersion': '1', 'User-Agent': 'PostmanRuntime/7.29.0',
                  'Accept': '*/*', 'Accept-Encoding': 'gzip, deflate', 'Connection': 'keep-alive'}
        ans = requests.get('https://mapi.dodopizza.ru/api/v4/menu/restaurant/643/00000140-0000-0000-0000-000000000000',
                           headers=header).json()
        dic_categori = {"1": '–ü–∏—Ü—Ü–∞', '6': "–î–µ—Å–µ—Ä—Ç", '3': '–ó–∞–∫—É—Å–∫–∏', '2': "–ù–∞–ø–∏—Ç–∫–∏"}
        categories = sorted(list(set([dic_categori[str(name['category'])] for name in ans['items'] if
                                      str(name['category']) in dic_categori.keys()])))
        # –ü–æ–ª—É—á–∞—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø—Ä–∏–º–µ—Ä, –ø–∏—Ü—Ü–∞, –¥–µ—Å–µ—Ä—Ç
        buttons = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).row(
            *[KeyboardButton(i) for i in categories])
        await message.answer('\n'.join([f"{id + 1}) {i}" for id, i in enumerate(categories)]), reply_markup=buttons)
        await message.answer("–ö–∞–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å?")
        await Dodo.menu.set()


@dp.message_handler(state=Dodo.menu)
async def pizza_menu(message: types.Message, state: FSMContext):
    dic_cat = {"–ü–∏—Ü—Ü–∞": 1, '–î–µ—Å–µ—Ä—Ç': 6, '–ó–∞–∫—É—Å–∫–∏': 3, '–ù–∞–ø–∏—Ç–∫–∏': 2}
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞
    if message.text.lower() not in list(map(str.lower, dic_cat.keys())):
        await message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—à–µ —Ä–∞–∑")
    header = {'CountryCode': '643', 'LanguageCode': 'ru', 'ApiVersion': '1', 'User-Agent': 'PostmanRuntime/7.29.0',
              'Accept': '*/*', 'Accept-Encoding': 'gzip, deflate', 'Connection': 'keep-alive'}
    ans = requests.get('https://mapi.dodopizza.ru/api/v4/menu/restaurant/643/00000140-0000-0000-0000-000000000000',
                       headers=header).json()
    cat = dic_cat[message.text.capitalize()]
    # –°–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é
    if cat != 1:
        food = []
        food_name = []
        for name in ans['items']:
            if name['category'] == cat and name['name'] not in food_name:
                food.append(
                    f"{name['name']} - {'-'.join(sorted(list(set([str(name['shoppingItems'][i]['price']) for i in range(len(name['shoppingItems']))]))))}")
                food_name.append(name['name'])
    else:
        food = [
            f"{name['name']} - {sorted(list(set([str(name['shoppingItems'][i]['price']) for i in range(len(name['shoppingItems']))])))[0] if len(sorted(list(set([str(name['shoppingItems'][i]['price']) for i in range(len(name['shoppingItems']))])))) == 1 else sorted(list(set([str(name['shoppingItems'][i]['price']) for i in range(len(name['shoppingItems']))])))[1]}"
            for name in ans['items'] if name['category'] == cat]
    food.insert(0, "–ù–∞–∑–≤–∞–Ω–∏–µ. –¶–µ–Ω–∞")
    await state.update_data(categorial=cat, menu=food[1:])
    await message.answer('\n'.join(food))
    await Dodo.add.set()
    buttons = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).row(KeyboardButton('–ù–∞–∑–∞–¥'))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n"
                         "–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–∞–Ω–≥–æ-—à–µ–π–∫", reply_markup=buttons)


@dp.message_handler(state=Dodo.add)
async def add_menu(message: types.Message, state: FSMContext):
    if message.text.lower() == '–Ω–∞–∑–∞–¥':
        await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥")
        task = asyncio.create_task(pizza(message, state))
        await task
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é
    data = await state.get_data()
    menu = data['menu']
    foods = {}
    for food_price in menu:
        foods[food_price.split(' - ')[0].capitalize().strip()] = float(food_price.split(' - ')[1])
    # –ü—Ä–æ–≤–µ—Ä–∫–∞
    await state.update_data(foods=foods)
    food = [name.strip().capitalize() for name in message.text.split(',')]
    if not all([name in foods.keys() for name in food]):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞")
    else:
        # –ü–æ–¥–≤–µ–¥–µ–Ω–∏—è —á–µ–∫–∞
        await state.update_data(current_food=food)
        if 'food' in data.keys():
            food += data['food']
        await state.update_data(food=food)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª—é–¥ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
        await Dodo.price.set()


@dp.message_handler(state=Dodo.price)
async def pizza_price(message: types.Message, state: FSMContext):
    try:
        col = [int(name.strip()) for name in message.text.split(',')]
        if any([name > 20 for name in col]):
            await message.answer("–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª—é–¥. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - 20")
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        else:
            data = await state.get_data()
            foods = data['foods']
            current_food = data['current_food']
            if len(current_food) != len(col):
                await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
            else:
                price = 0
                check = []
                for i in range(len(col)):
                    price += int(foods[current_food[i]]) * col[i]
                    check.append(f"{current_food[i]}/{col[i]}")
                if 'price' in data.keys():
                    price += data['price']
                await state.update_data(price=price, food=check)
                buttons = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).row(
                    *[KeyboardButton(i) for i in ['–û–ø–ª–∞—Ç–∏—Ç—å', '–î–æ–±–∞–≤–∏—Ç—å']])
                await message.answer("–ì–æ—Ç–æ–≤–æ. –í—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–∞?", reply_markup=buttons)
                await Dodo.back.set()
    except ValueError:
        await message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")


@dp.message_handler(state=Dodo.result)
async def pizza_result(message: types.Message, state: FSMContext):
    if message.text.capitalize() not in ['–¢–µ–ª–µ–≥—Ä–∞–º–º', '–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã']:
        await message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
    else:
        data = await state.get_data()
        if message.text.capitalize() == '–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã':
            user_name, chat_id = data['user_name'], data['chat_id']
            await message.answer(f"–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –∂–¥–µ—Ç –æ—Ç–ø–ª–∞—Ç\n"
                                 f"–ó–∞–∫–∞–∑ –Ω–∞ —Å—É–º–º—É {data['price']}. –°–∞–º –∑–∞–∫–∞–∑ - {','.join(data['food'])}")
            await bot.send_message(chat_id, f"–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–∏–ª {message.from_user.username}, –Ω–∞ —Å—É–º–º—É {data['price']}.\n"
                                            f"–°–∞–º –∑–∞–∫–∞–∑ - {','.join(data['food'])}")
            csv = pd.read_csv("order.csv")
            dic = {'name': message.from_user.username, 'order': ','.join(data['food']), 'price': data['price'],
                   'restoran': data['RESTORAN']}
            csv = pd.concat([csv, pd.DataFrame(dic, index=[0])], ignore_index=True, axis=0)
            csv = csv[['name', 'order', 'price', 'restoran']]
            csv.to_csv('order.csv')
            cur.execute("""SELECT id FROM userinfo WHERE name = %s""", (user_name,))
            user = cur.fetchone()
            cur.execute("""INSERT INTO orderrespose (id_order, id_user, price, order_text) VALUES (%s, %s, %s, %s)""",
                        (data['order'], user, data['price'], data['food']))
            con.commit()
            await state.finish()
        elif message.text.capitalize() == '–¢–µ–ª–µ–≥—Ä–∞–º–º':
            PRICE = types.LabeledPrice(label=f"{data['RESTORAN']}",
                                       amount=int(data['price'] * 100))

            await bot.send_invoice(message.chat.id,
                                   title=f"{data['RESTORAN']}",
                                   description=f"–ó–∞–∫–∞–∑: {','.join(data['food'])}",
                                   provider_token=token_pay,
                                   currency="rub",
                                   is_flexible=False,
                                   prices=[PRICE],
                                   start_parameter='pay-order',
                                   payload="test-invoice-payload")
            await state.finish()
            user_name = data['user_name']
            cur.execute("""SELECT id FROM userinfo WHERE name = %s""", (user_name,))
            user = cur.fetchone()
            cur.execute("""INSERT INTO orderrespose (id_order, id_user, price, order_text) VALUES (%s, %s, %s, %s)""",
                        (data['order'], user, data['price'], data['food']))
            con.commit()


# pre checkout  (must be answered in 10 seconds)
@dp.pre_checkout_query_handler(lambda query: True)
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)


# successful payment
@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: types.Message):
    print("SUCCESSFUL PAYMENT:")
    payment_info = message.successful_payment.to_python()
    for k, v in payment_info.items():
        print(f"{k} = {v}")

    await bot.send_message(message.chat.id,
                           f"–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100} {message.successful_payment.currency} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!!!")


"""–û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω–¥–µ–Ω—Ç–∏—á–Ω—ã. –†–∞–∑–Ω–∏—Ü–∞ –≤ —Å—á–∏—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏ –∏—Ö –≤—ã–≤–æ–¥–µ
–ï—Å—Ç—å 4 —Ä–µ—Å—Ç–∞—Ä–∞–Ω–∞ –î–æ–¥–æ, –õ–∏–º–æ–Ω–∞–¥, –§–∞–Ω–∫–∞ –∏ –ò–±–µ—Ä–∏—è"""


@dp.message_handler(state=Fank.back)
async def fank(message: types.Message, state: FSMContext):
    if message.text.capitalize() not in ['–û–ø–ª–∞—Ç–∏—Ç—å', '–î–æ–±–∞–≤–∏—Ç—å', '–î–∞']:
        await message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
    elif message.text.capitalize() == '–û–ø–ª–∞—Ç–∏—Ç—å':
        buttons = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).row(
            *[KeyboardButton(i) for i in ['–¢–µ–ª–µ–≥—Ä–∞–º–º', '–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã']])
        await message.answer("–û–ø–ª–∞—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –¢–µ–ª–µ–≥—Ä–∞–º–º, –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –∑–∞–∫–∞–∑–∞",
                             reply_markup=buttons)
        await Fank.result.set()
    else:
        with open('fak.txt', 'r', encoding='utf-8') as file:
            text = ''.join(file.readlines()).split('\n')
        await state.update_data(menu=text)
        buttons = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).row(
            *[KeyboardButton(i) for i in ['–ó–∞–≤—Ç—Ä–∞–∫', '–ü–∏—Ü—Ü–∞', '–°–∞–ª–∞—Ç—ã']])
        await message.answer('\n'.join([f"{id + 1}) {i}" for id, i in enumerate(['–ó–∞–≤—Ç—Ä–∞–∫', '–ü–∏—Ü—Ü–∞', '–°–∞–ª–∞—Ç—ã'])]),
                             reply_markup=buttons)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=buttons)
        await Fank.menu.set()


@dp.message_handler(state=Fank.result)
async def fank_result(message: types.Message, state: FSMContext):
    if message.text.capitalize() not in ['–¢–µ–ª–µ–≥—Ä–∞–º–º', '–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã']:
        await message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
    else:
        if message.text.capitalize() == '–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã':
            data = await state.get_data()
            user_name, chat_id = data['user_name'], data['chat_id']
            await message.answer(f"–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –∂–¥–µ—Ç –æ—Ç–ø–ª–∞—Ç—ã")
            await bot.send_message(chat_id, f"–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–∏–ª {message.from_user.username}, –Ω–∞ —Å—É–º–º—É {data['price']}.\n"
                                            f"–°–∞–º –∑–∞–∫–∞–∑ - {','.join(data['food'])}")
            csv = pd.read_csv("order.csv")
            dic = {'name': message.from_user.username, 'order': ','.join(data['food']), 'price': data['price'],
                   'restoran': data['RESTORAN']}
            csv = pd.concat([csv, pd.DataFrame(dic, index=[0])], ignore_index=True, axis=0)
            csv = csv[['name', 'order', 'price', 'restoran']]
            csv.to_csv('order.csv')
            cur.execute("""SELECT id FROM userinfo WHERE name = %s""", (user_name,))
            user = cur.fetchone()
            cur.execute("""INSERT INTO orderrespose (id_order, id_user, price, order_text) VALUES (%s, %s, %s, %s)""",
                        (data['order'], user, data['price'], data['food']))
            con.commit()
        elif message.text.capitalize() == '–¢–µ–ª–µ–≥—Ä–∞–º–º':
            data = await state.get_data()
            PRICE = types.LabeledPrice(label=f"{data['RESTORAN']}",
                                       amount=int(data['price'] * 100))

            await bot.send_invoice(message.chat.id,
                                   title=f"{data['RESTORAN']}",
                                   description=f"–ó–∞–∫–∞–∑: {','.join(data['food'])}",
                                   provider_token=token_pay,
                                   currency="rub",
                                   is_flexible=False,
                                   prices=[PRICE],
                                   start_parameter='pay-order',
                                   payload="test-invoice-payload")
            user_name = data['user_name']
            cur.execute("""SELECT id FROM userinfo WHERE name = %s""", (user_name,))
            user = cur.fetchone()
            cur.execute("""INSERT INTO orderrespose (id_order, id_user, price, order_text) VALUES (%s, %s, %s, %s)""",
                        (data['order'], user, data['price'], data['food']))
            con.commit()


@dp.message_handler(state=Fank.menu)
async def fank_menu(message: types.Message, state: FSMContext):
    dic_cat = {"–ü–∏—Ü—Ü–∞": '2', '–ó–∞–≤—Ç—Ä–∞–∫': '1', '–°–∞–ª–∞—Ç—ã': '3'}
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞
    if message.text.lower() not in list(map(str.lower, dic_cat.keys())):
        await message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—à–µ —Ä–∞–∑")
    else:
        cat = dic_cat[message.text.capitalize()]
        data = await state.get_data()
        menu = data['menu']
        food = [f"{i.split('-')[1]} - {i.split('-')[-1]}" for i in menu if i.split('-')[0] == cat]
        food.insert(0, '–ù–∞–∑–≤–∞–Ω–∏–µ. –¶–µ–Ω–∞')
        await state.update_data(categorial=cat, menu=food[1:])
        await message.answer('\n'.join(food))
        await Fank.add.set()
        buttons = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).row(KeyboardButton('–ù–∞–∑–∞–¥'))
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã—Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å.\n"
                             "–ü—Ä–∏–º–µ—Ä. –ú–∞–Ω–≥–æ-—à–µ–π–∫", reply_markup=buttons)


@dp.message_handler(state=Fank.add)
async def fank_add(message: types.Message, state: FSMContext):
    if message.text.lower() == '–Ω–∞–∑–∞–¥':
        await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥")
        task = asyncio.create_task(fank(message, state))
        await task
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é
    data = await state.get_data()
    menu = data['menu']
    foods = {}
    for food_price in menu:
        foods[food_price.split(' - ')[0].capitalize().strip()] = float(food_price.split(' - ')[1])
    # –ü—Ä–æ–≤–µ—Ä–∫–∞
    await state.update_data(foods=foods)
    food = [name.strip().capitalize() for name in message.text.split(',')]
    if not all([name in foods.keys() for name in food]):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞")
    else:
        # –ü–æ–¥–≤–µ–¥–µ–Ω–∏—è —á–µ–∫–∞
        await state.update_data(current_food=food)
        if 'food' in data.keys():
            food += data['food']
        await state.update_data(food=food)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª—é–¥ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
        await Fank.price.set()


@dp.message_handler(state=Fank.price)
async def fank_price(message: types.Message, state: FSMContext):
    try:
        col = [int(name.strip()) for name in message.text.split(',')]
        if any([name > 20 for name in col]):
            await message.answer("–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª—é–¥. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - 20")
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        else:
            data = await state.get_data()
            foods = data['foods']
            current_food = data['current_food']
            if len(current_food) != len(col):
                await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
            else:
                price = 0
                check = []
                for i in range(len(col)):
                    price += int(foods[current_food[i]]) * col[i]
                    check.append(f"{current_food[i]}/{col[i]}")
                if 'price' in data.keys():
                    price += data['price']
                await state.update_data(price=price, food=check)
                buttons = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).row(
                    *[KeyboardButton(i) for i in ['–û–ø–ª–∞—Ç–∏—Ç—å', '–î–æ–±–∞–≤–∏—Ç—å']])
                await message.answer("–ì–æ—Ç–æ–≤–æ. –í—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–∞?", reply_markup=buttons)
                await Fank.back.set()
    except ValueError:
        await message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")


@dp.message_handler(state=Limonad.back)
async def limonad(message: types.Message, state: FSMContext):
    if message.text.capitalize() not in ['–û–ø–ª–∞—Ç–∏—Ç—å', '–î–æ–±–∞–≤–∏—Ç—å', '–î–∞', '–ù–∞–∑–∞–¥']:
        await message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
    elif message.text.capitalize() == '–û–ø–ª–∞—Ç–∏—Ç—å':
        buttons = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).row(
            *[KeyboardButton(i) for i in ['–¢–µ–ª–µ–≥—Ä–∞–º–º', '–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã']])
        await message.answer("–û–ø–ª–∞—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –¢–µ–ª–µ–≥—Ä–∞–º–º, –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –∑–∞–∫–∞–∑–∞",
                             reply_markup=buttons)
        await Limonad.result.set()
    else:
        with open('limonad.txt', 'r', encoding='utf-8') as file:
            text = ''.join(file.readlines()).split('\n')
        await state.update_data(menu=text)
        buttons = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).row(
            *[KeyboardButton(i) for i in ['–°—É–ø—ã', '–°—Ç–µ–π–∫–∏', '–î–µ—Å–µ—Ä—Ç—ã', '–ü–∞—Å—Ç–∞']])
        await message.answer(
            '\n'.join([f"{id + 1}) {i}" for id, i in enumerate(['–°—É–ø—ã', '–°—Ç–µ–π–∫–∏', '–î–µ—Å–µ—Ä—Ç—ã', '–ü–∞—Å—Ç–∞'])]),
            reply_markup=buttons)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=buttons)
        await Limonad.menu.set()


@dp.message_handler(state=Limonad.result)
async def limonad_result(message: types.Message, state: FSMContext):
    if message.text.capitalize() not in ['–¢–µ–ª–µ–≥—Ä–∞–º–º', '–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã']:
        await message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
    else:
        if message.text.capitalize() == '–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã':
            data = await state.get_data()
            user_name, chat_id = data['user_name'], data['chat_id']
            await message.answer(f"–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –∂–¥–µ—Ç –æ—Ç–ø–ª–∞—Ç—ã")
            await bot.send_message(chat_id, f"–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–∏–ª {message.from_user.username}, –Ω–∞ —Å—É–º–º—É {data['price']}.\n"
                                            f"–°–∞–º –∑–∞–∫–∞–∑ - {','.join(data['food'])}")
            csv = pd.read_csv("order.csv")
            dic = {'name': message.from_user.username, 'order': ','.join(data['food']), 'price': data['price'],
                   'restoran': data['RESTORAN']}
            csv = pd.concat([csv, pd.DataFrame(dic, index=[0])], ignore_index=True, axis=0)
            csv = csv[['name', 'order', 'price', 'restoran']]
            csv.to_csv('order.csv')
            cur.execute("""SELECT id FROM userinfo WHERE name = %s""", (user_name,))
            user = cur.fetchone()
            cur.execute("""INSERT INTO orderrespose (id_order, id_user, price, order_text) VALUES (%s, %s, %s, %s)""",
                        (data['order'], user, data['price'], data['food']))
            con.commit()
        elif message.text.capitalize() == '–¢–µ–ª–µ–≥—Ä–∞–º–º':
            data = await state.get_data()
            PRICE = types.LabeledPrice(label=f"{data['RESTORAN']}",
                                       amount=int(data['price'] * 100))

            await bot.send_invoice(message.chat.id,
                                   title=f"{data['RESTORAN']}",
                                   description=f"–ó–∞–∫–∞–∑: {','.join(data['food'])}",
                                   provider_token=token_pay,
                                   currency="rub",
                                   is_flexible=False,
                                   prices=[PRICE],
                                   start_parameter='pay-order',
                                   payload="test-invoice-payload")
            user_name = data['user_name']
            cur.execute("""SELECT id FROM userinfo WHERE name = %s""", (user_name,))
            user = cur.fetchone()
            cur.execute("""INSERT INTO orderrespose (id_order, id_user, price, order_text) VALUES (%s, %s, %s, %s)""",
                        (data['order'], user, data['price'], data['food']))
            con.commit()


@dp.message_handler(state=Limonad.menu)
async def limonad_menu(message: types.Message, state: FSMContext):
    dic_cat = {"–ü–∞—Å—Ç–∞": '2', '–°—É–ø—ã': '1', '–î–µ—Å–µ—Ä—Ç—ã': '3', '–°—Ç–µ–π–∫–∏': '4'}
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞
    if message.text.lower() not in list(map(str.lower, dic_cat.keys())):
        await message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—à–µ —Ä–∞–∑")
    else:
        cat = dic_cat[message.text.capitalize()]
        data = await state.get_data()
        menu = data['menu']
        food = [f"{i.split('-')[1]} - {i.split('-')[-1]}" for i in menu if i.split('-')[0] == cat]
        food.insert(0, '–ù–∞–∑–≤–∞–Ω–∏–µ. –¶–µ–Ω–∞')
        await state.update_data(categorial=cat, menu=food[1:])
        await message.answer('\n'.join(food))
        await Limonad.add.set()
        buttons = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).row(KeyboardButton('–ù–∞–∑–∞–¥'))
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã—Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å.\n"
                             "–ü—Ä–∏–º–µ—Ä. –ú–∞–Ω–≥–æ-—à–µ–π–∫", reply_markup=buttons)


@dp.message_handler(state=Limonad.add)
async def limonad_add(message: types.Message, state: FSMContext):
    if message.text.lower() == '–Ω–∞–∑–∞–¥':
        await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥")
        task = asyncio.create_task(limonad(message, state))
        await task
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é
    data = await state.get_data()
    menu = data['menu']
    foods = {}
    for food_price in menu:
        foods[food_price.split(' - ')[0].capitalize().strip()] = float(food_price.split(' - ')[1])
    # –ü—Ä–æ–≤–µ—Ä–∫–∞
    await state.update_data(foods=foods)
    food = [name.strip().capitalize() for name in message.text.split(',')]
    if not all([name in foods.keys() for name in food]):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞")
    else:
        # –ü–æ–¥–≤–µ–¥–µ–Ω–∏—è —á–µ–∫–∞
        await state.update_data(current_food=food)
        if 'food' in data.keys():
            food += data['food']
        await state.update_data(food=food)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª—é–¥ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
        await Limonad.price.set()


@dp.message_handler(state=Limonad.price)
async def limonad_price(message: types.Message, state: FSMContext):
    try:
        col = [int(name.strip()) for name in message.text.split(',')]
        if any([name > 20 for name in col]):
            await message.answer("–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª—é–¥. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - 20")
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        else:
            data = await state.get_data()
            foods = data['foods']
            current_food = data['current_food']
            if len(current_food) != len(col):
                await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
            else:
                price = 0
                check = []
                for i in range(len(col)):
                    price += int(foods[current_food[i]]) * col[i]
                    check.append(f"{current_food[i]}/{col[i]}")
                if 'price' in data.keys():
                    price += data['price']
                await state.update_data(price=price, food=check)
                buttons = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).row(
                    *[KeyboardButton(i) for i in ['–û–ø–ª–∞—Ç–∏—Ç—å', '–î–æ–±–∞–≤–∏—Ç—å']])
                await message.answer("–ì–æ—Ç–æ–≤–æ. –í—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–∞?", reply_markup=buttons)
                await Limonad.back.set()
    except ValueError:
        await message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")


@dp.message_handler(state=Iberia.back)
async def iberia(message: types.Message, state: FSMContext):
    if message.text.capitalize() not in ['–û–ø–ª–∞—Ç–∏—Ç—å', '–î–æ–±–∞–≤–∏—Ç—å', '–î–∞', "–ù–∞–∑–∞–¥"]:
        await message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
    elif message.text.capitalize() == '–û–ø–ª–∞—Ç–∏—Ç—å':
        buttons = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).row(
            *[KeyboardButton(i) for i in ['–¢–µ–ª–µ–≥—Ä–∞–º–º', '–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã']])
        await message.answer("–û–ø–ª–∞—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –¢–µ–ª–µ–≥—Ä–∞–º–º, –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –∑–∞–∫–∞–∑–∞",
                             reply_markup=buttons)
        await Iberia.result.set()
    else:
        with open('iberia.txt', 'r', encoding='utf-8') as file:
            text = ''.join(file.readlines()).split('\n')
        await state.update_data(menu=text)
        buttons = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).row(
            *[KeyboardButton(i) for i in ['–®–∞—à–ª—ã–∫', '–ë–ª—é–¥–∞ –Ω–∞ –∑–∞–∫–∞–∑', '–ì–æ—Ä—è—á–∏–µ –±–ª—é–¥–∞', '–ë–ª—é–¥–∞ –∏–∑ —Ä—ã–±—ã']])
        await message.answer('\n'.join(
            [f"{id + 1}) {i}" for id, i in enumerate(['–®–∞—à–ª—ã–∫', '–ë–ª—é–¥–∞ –Ω–∞ –∑–∞–∫–∞–∑', '–ì–æ—Ä—è—á–∏–µ –±–ª—é–¥–∞', '–ë–ª—é–¥–∞ –∏–∑ —Ä—ã–±—ã'])]),
            reply_markup=buttons)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=buttons)
        await Iberia.menu.set()


@dp.message_handler(state=Iberia.result)
async def iberia_result(message: types.Message, state: FSMContext):
    if message.text.capitalize() not in ['–¢–µ–ª–µ–≥—Ä–∞–º–º', '–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã']:
        await message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
    else:
        if message.text.capitalize() == '–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã':
            data = await state.get_data()
            user_name, chat_id = data['user_name'], data['chat_id']
            await message.answer(f"–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –∂–¥–µ—Ç –æ—Ç–ø–ª–∞—Ç—ã")
            await bot.send_message(chat_id, f"–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–∏–ª {message.from_user.username}, –Ω–∞ —Å—É–º–º—É {data['price']}.\n"
                                            f"–°–∞–º –∑–∞–∫–∞–∑ - {','.join(data['food'])}")
            # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
            csv = pd.read_csv("order.csv")
            dic = {'name': message.from_user.username, 'order': ','.join(data['food']), 'price': data['price'],
                   'restoran': data['RESTORAN']}
            csv = pd.concat([csv, pd.DataFrame(dic, index=[0])], ignore_index=True, axis=0)
            csv = csv[['name', 'order', 'price', 'restoran']]
            csv.to_csv('order.csv')
            cur.execute("""SELECT id FROM userinfo WHERE name = %s""", (user_name,))
            user = cur.fetchone()
            cur.execute("""INSERT INTO orderrespose (id_order, id_user, price, order_text) VALUES (%s, %s, %s, %s)""",
                        (data['order'], user, data['price'], data['food']))
            con.commit()
        elif message.text.capitalize() == '–¢–µ–ª–µ–≥—Ä–∞–º–º':
            data = await state.get_data()
            PRICE = types.LabeledPrice(label=f"{data['RESTORAN']}",
                                       amount=int(data['price'] * 100))

            await bot.send_invoice(message.chat.id,
                                   title=f"{data['RESTORAN']}",
                                   description=f"–ó–∞–∫–∞–∑: {','.join(data['food'])}",
                                   provider_token=token_pay,
                                   currency="rub",
                                   is_flexible=False,
                                   prices=[PRICE],
                                   start_parameter='pay-order',
                                   payload="test-invoice-payload")
            user_name = data['user_name']
            cur.execute("""SELECT id FROM userinfo WHERE name = %s""", (user_name,))
            user = cur.fetchone()
            cur.execute("""INSERT INTO orderrespose (id_order, id_user, price, order_text) VALUES (%s, %s, %s, %s)""",
                        (data['order'], user, data['price'], data['food']))
            con.commit()


@dp.message_handler(state=Iberia.menu)
async def iberia_menu(message: types.Message, state: FSMContext):
    dic_cat = {"–®–∞—à–ª—ã–∫": '1', '–ë–ª—é–¥–∞ –Ω–∞ –∑–∞–∫–∞–∑': '2', '–ì–æ—Ä—è—á–∏–µ –±–ª—é–¥–∞': '3', '–ë–ª—é–¥–∞ –∏–∑ —Ä—ã–±—ã': '4'}
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞
    if message.text.lower() not in list(map(str.lower, dic_cat.keys())):
        await message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—à–µ —Ä–∞–∑")
    else:
        cat = dic_cat[message.text.capitalize()]
        data = await state.get_data()
        menu = data['menu']
        food = [f"{i.split('-')[1]} - {i.split('-')[-1]}" for i in menu if i.split('-')[0] == cat]
        food.insert(0, '–ù–∞–∑–≤–∞–Ω–∏–µ. –¶–µ–Ω–∞')
        await state.update_data(categorial=cat, menu=food[1:])
        await message.answer('\n'.join(food))
        await Iberia.add.set()
        buttons = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).row(KeyboardButton('–ù–∞–∑–∞–¥'))
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã—Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å.\n"
                             "–ü—Ä–∏–º–µ—Ä. –ú–∞–Ω–≥–æ-—à–µ–π–∫", reply_markup=buttons)


@dp.message_handler(state=Iberia.add)
async def iberia_add(message: types.Message, state: FSMContext):
    if message.text.lower() == '–Ω–∞–∑–∞–¥':
        await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥")
        task = asyncio.create_task(limonad(message, state))
        await task
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é
    data = await state.get_data()
    menu = data['menu']
    foods = {}
    for food_price in menu:
        foods[food_price.split(' - ')[0].capitalize().strip()] = float(food_price.split(' - ')[1])
    # –ü—Ä–æ–≤–µ—Ä–∫–∞
    await state.update_data(foods=foods)
    food = [name.strip().capitalize() for name in message.text.split(',')]
    if not all([name in foods.keys() for name in food]):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞")
    else:
        # –ü–æ–¥–≤–µ–¥–µ–Ω–∏—è —á–µ–∫–∞
        await state.update_data(current_food=food)
        if 'food' in data.keys():
            food += data['food']
        await state.update_data(food=food)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª—é–¥ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
        await Iberia.price.set()


@dp.message_handler(state=Iberia.price)
async def iberia_price(message: types.Message, state: FSMContext):
    try:
        col = [int(name.strip()) for name in message.text.split(',')]
        if any([name > 20 for name in col]):
            await message.answer("–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª—é–¥. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - 20")
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        else:
            data = await state.get_data()
            foods = data['foods']
            current_food = data['current_food']
            if len(current_food) != len(col):
                await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
            else:
                price = 0
                check = []
                for i in range(len(col)):
                    price += int(foods[current_food[i]]) * col[i]
                    check.append(f"{current_food[i]}/{col[i]}")
                if 'price' in data.keys():
                    price += data['price']
                await state.update_data(price=price, food=check)
                buttons = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).row(
                    *[KeyboardButton(i) for i in ['–û–ø–ª–∞—Ç–∏—Ç—å', '–î–æ–±–∞–≤–∏—Ç—å']])
                await message.answer("–ì–æ—Ç–æ–≤–æ. –í—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–∞?", reply_markup=buttons)
                await Iberia.back.set()
    except ValueError:
        await message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")


async def scheduled(wait_for, id, user_name, chat_id, order):
    await asyncio.sleep(wait_for)
    print(user_name, chat_id, order)
    cur.execute("""SELECT orderrespose.price, orderrespose.order_text, orderrespose.id_user, userinfo.name FROM orderrespose 
INNER JOIN userinfo ON userinfo.id = orderrespose.id_user WHERE orderrespose.id_order = %s""", (order,))
    answer = cur.fetchall()
    if len(answer) > 0:
        print(answer)
        new_answer_message = ['–í—Ä–µ–º—è –≤—ã—à–ª–æ. –ß–µ–∫:']
        for id, info in enumerate(answer):
            new_answer_message.append(F"–ó–∞–∫–∞–∑ –Ω–æ–º–µ—Ä {id + 1} –æ—Ç {info[-1]} –Ω–∞ —Å—É–º–º—É {info[0]}. –ó–∞–∫–∞–∑ {info[1][1:-1]}")
        await bot.send_message(chat_id, '\n'.join(new_answer_message))
    else:
        await bot.send_message(chat_id, '–ó–∞–∫–∞–∑ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏–Ω—è–ª')
    cur.execute("""SELECT id_chat FROM userinfo""")
    users = cur.fetchall()
    for chat_id in users:
        state_user = dp.current_state(chat=int(chat_id[0]), user=int(chat_id[0]))
        await bot.send_message(chat_id[0], f"–ó–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name} –∑–∞–∫–æ–Ω—á–∏–ª—Å—è")
        await state_user.finish()
    cur.execute("""DELETE FROM orderrespose WHERE id_order = %s""", (order,))
    con.commit()


if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    con = psycopg2.connect(f"dbname={db_name} host={host} password={password} port={port} user={user}")
    cur = con.cursor()
    executor.start_polling(dp, skip_updates=True)
